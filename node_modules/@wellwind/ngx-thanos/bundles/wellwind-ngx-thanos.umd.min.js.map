{"version":3,"sources":["ng://@wellwind/ngx-thanos/lib/thanos-snap.service.ts","ng://@wellwind/ngx-thanos/lib/thanos-snap.directive.ts","ng://@wellwind/ngx-thanos/lib/ngx-thanos.module.ts"],"names":["ThanosSnapService","prototype","snap","target","from","thanosSnap","rewind","thanosRewind","Injectable","args","providedIn","ThanosSnapDirective","Object","defineProperty","this","elementRef","nativeElement","ngOnChanges","ngxThanosSnap","_this","snapStarting","emit","thanosSnapService","host","subscribe","snapEnded","rewinded","Directive","selector","exportAs","ElementRef","Input","Output","EventEmitter","NgxThanosModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"odAAA,IAAAA,GAWEA,EAAAC,UAAAC,KAAA,SAAKC,GACH,OAAOC,EAAAA,KAAKC,EAAAA,WAAWF,KAGzBH,EAAAC,UAAAK,OAAA,SAAOH,GACL,OAAOC,EAAAA,KAAKG,EAAAA,aAAaJ,yBAZ5BK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAV,KCTF,IAAAW,GAeEC,OAAAC,eAAIF,EAAAV,UAAA,OAAI,KAAR,WACE,OAAOa,KAAKC,WAAWC,+CAKzBL,EAAAV,UAAAgB,YAAA,WACMH,KAAKI,cACPJ,KAAKZ,OAELY,KAAKR,UAITK,EAAAV,UAAAC,KAAA,WAAA,IAAAiB,EAAAL,KACEA,KAAKM,aAAaC,OAClBP,KAAKQ,kBAAkBpB,KAAKY,KAAKS,MAAMC,UAAS,WAAO,OAAAL,EAAKM,UAAUJ,UAGxEV,EAAAV,UAAAK,OAAA,WAAA,IAAAa,EAAAL,KACEA,KAAKQ,kBAAkBhB,OAAOQ,KAAKS,MAAMC,UAAS,WAAO,OAAAL,EAAKO,SAASL,8BAhC1EM,EAAAA,UAASlB,KAAA,CAAC,CACTmB,SAAU,kBACVC,SAAU,6DALQC,EAAAA,kBACX9B,4CAQN+B,EAAAA,4BAEAC,EAAAA,0BACAA,EAAAA,yBACAA,EAAAA,UAwBHrB,GAlBE,SAAAA,EAAoBI,EAAgCO,GAAhCR,KAAAC,WAAAA,EAAgCD,KAAAQ,kBAAAA,EAV3CR,KAAAI,eAAgB,EAEfJ,KAAAM,aAAe,IAAIa,EAAAA,aACnBnB,KAAAW,UAAY,IAAIQ,EAAAA,aAChBnB,KAAAY,SAAW,IAAIO,EAAAA,aCb3B,IAAAC,uBAICC,EAAAA,SAAQ1B,KAAA,CAAC,CACR2B,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC3B,GACf4B,QAAS,CAAC5B,OAEkBuB,GAL9B,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { thanosRewind, thanosSnap } from '@wellwind/thanos-snap';\r\nimport { from } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThanosSnapService {\r\n\r\n  constructor() { }\r\n\r\n  snap(target: HTMLElement) {\r\n    return from(thanosSnap(target));\r\n  }\r\n\r\n  rewind(target: HTMLElement) {\r\n    return from(thanosRewind(target));\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { ThanosSnapService } from './thanos-snap.service';\r\n\r\n@Directive({\r\n  selector: '[ngxThanosSnap]',\r\n  exportAs: 'ngxThanosSnap'\r\n})\r\nexport class ThanosSnapDirective implements OnChanges {\r\n\r\n  @Input() ngxThanosSnap = false;\r\n\r\n  @Output() snapStarting = new EventEmitter<void>();\r\n  @Output() snapEnded = new EventEmitter<void>();\r\n  @Output() rewinded = new EventEmitter<void>();\r\n\r\n  get host(): HTMLElement {\r\n    return this.elementRef.nativeElement\r\n  }\r\n\r\n  constructor(private elementRef: ElementRef, private thanosSnapService: ThanosSnapService) { }\r\n\r\n  ngOnChanges() {\r\n    if (this.ngxThanosSnap) {\r\n      this.snap();\r\n    } else {\r\n      this.rewind()\r\n    }\r\n  }\r\n\r\n  snap() {\r\n    this.snapStarting.emit();\r\n    this.thanosSnapService.snap(this.host).subscribe(() => this.snapEnded.emit());\r\n  }\r\n\r\n  rewind() {\r\n    this.thanosSnapService.rewind(this.host).subscribe(() => this.rewinded.emit());\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ThanosSnapDirective } from './thanos-snap.directive';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ThanosSnapDirective],\r\n  exports: [ThanosSnapDirective]\r\n})\r\nexport class NgxThanosModule {}\r\n"]}