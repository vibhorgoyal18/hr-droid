{"version":3,"file":"wellwind-ngx-thanos.umd.js.map","sources":["ng://@wellwind/ngx-thanos/lib/thanos-snap.service.ts","ng://@wellwind/ngx-thanos/lib/thanos-snap.directive.ts","ng://@wellwind/ngx-thanos/lib/ngx-thanos.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { thanosRewind, thanosSnap } from '@wellwind/thanos-snap';\r\nimport { from } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ThanosSnapService {\r\n\r\n  constructor() { }\r\n\r\n  snap(target: HTMLElement) {\r\n    return from(thanosSnap(target));\r\n  }\r\n\r\n  rewind(target: HTMLElement) {\r\n    return from(thanosRewind(target));\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { ThanosSnapService } from './thanos-snap.service';\r\n\r\n@Directive({\r\n  selector: '[ngxThanosSnap]',\r\n  exportAs: 'ngxThanosSnap'\r\n})\r\nexport class ThanosSnapDirective implements OnChanges {\r\n\r\n  @Input() ngxThanosSnap = false;\r\n\r\n  @Output() snapStarting = new EventEmitter<void>();\r\n  @Output() snapEnded = new EventEmitter<void>();\r\n  @Output() rewinded = new EventEmitter<void>();\r\n\r\n  get host(): HTMLElement {\r\n    return this.elementRef.nativeElement\r\n  }\r\n\r\n  constructor(private elementRef: ElementRef, private thanosSnapService: ThanosSnapService) { }\r\n\r\n  ngOnChanges() {\r\n    if (this.ngxThanosSnap) {\r\n      this.snap();\r\n    } else {\r\n      this.rewind()\r\n    }\r\n  }\r\n\r\n  snap() {\r\n    this.snapStarting.emit();\r\n    this.thanosSnapService.snap(this.host).subscribe(() => this.snapEnded.emit());\r\n  }\r\n\r\n  rewind() {\r\n    this.thanosSnapService.rewind(this.host).subscribe(() => this.rewinded.emit());\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ThanosSnapDirective } from './thanos-snap.directive';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [ThanosSnapDirective],\r\n  exports: [ThanosSnapDirective]\r\n})\r\nexport class NgxThanosModule {}\r\n"],"names":["from","thanosSnap","thanosRewind","Injectable","EventEmitter","Directive","ElementRef","Input","Output","NgModule","CommonModule"],"mappings":";;;;;;;;;;AAAA;QASE;SAAiB;;;;;QAEjB,gCAAI;;;;YAAJ,UAAK,MAAmB;gBACtB,OAAOA,SAAI,CAACC,qBAAU,CAAC,MAAM,CAAC,CAAC,CAAC;aACjC;;;;;QAED,kCAAM;;;;YAAN,UAAO,MAAmB;gBACxB,OAAOD,SAAI,CAACE,uBAAY,CAAC,MAAM,CAAC,CAAC,CAAC;aACnC;;oBAbFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;gCAND;KAIA;;;;;;ACJA;QAmBE,6BAAoB,UAAsB,EAAU,iBAAoC;YAApE,eAAU,GAAV,UAAU,CAAY;YAAU,sBAAiB,GAAjB,iBAAiB,CAAmB;YAV/E,kBAAa,GAAG,KAAK,CAAC;YAErB,iBAAY,GAAG,IAAIC,eAAY,EAAQ,CAAC;YACxC,cAAS,GAAG,IAAIA,eAAY,EAAQ,CAAC;YACrC,aAAQ,GAAG,IAAIA,eAAY,EAAQ,CAAC;SAM+C;QAJ7F,sBAAI,qCAAI;;;gBAAR;gBACE,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAA;aACrC;;;WAAA;;;;QAID,yCAAW;;;YAAX;gBACE,IAAI,IAAI,CAAC,aAAa,EAAE;oBACtB,IAAI,CAAC,IAAI,EAAE,CAAC;iBACb;qBAAM;oBACL,IAAI,CAAC,MAAM,EAAE,CAAA;iBACd;aACF;;;;QAED,kCAAI;;;YAAJ;gBAAA,iBAGC;gBAFC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;gBACzB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS;;mBAAC,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,GAAA,EAAC,CAAC;aAC/E;;;;QAED,oCAAM;;;YAAN;gBAAA,iBAEC;gBADC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS;;mBAAC,cAAM,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAA,EAAC,CAAC;aAChF;;oBAjCFC,YAAS,SAAC;wBACT,QAAQ,EAAE,iBAAiB;wBAC3B,QAAQ,EAAE,eAAe;qBAC1B;;;;;wBANmBC,aAAU;wBACrB,iBAAiB;;;;oCAQvBC,QAAK;mCAELC,SAAM;gCACNA,SAAM;+BACNA,SAAM;;QAwBT,0BAAC;KAlCD;;;;;;ACHA;QAIA;SAK+B;;oBAL9BC,WAAQ,SAAC;wBACR,OAAO,EAAE,CAACC,mBAAY,CAAC;wBACvB,YAAY,EAAE,CAAC,mBAAmB,CAAC;wBACnC,OAAO,EAAE,CAAC,mBAAmB,CAAC;qBAC/B;;QAC6B,sBAAC;KAL/B;;;;;;;;;;;;;;;;;;;;;;;;"}
